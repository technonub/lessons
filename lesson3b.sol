
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;


contract Tasks {
    uint32  timestamp;

	struct taskList{
		string name;
		uint  times;
		bool done;	
	}
   
   // Task[] public NewTask;
    mapping(uint8 => taskList) Task;
    uint8 I = 0;
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;
    }
     modifier checkOwner() {       
     
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();        
        _;        
    }
    
      
    function AddToList(string  _name) public checkOwner {
        tvm.accept();
        taskList myTask = taskList(_name, now, false);
	    I++;
        

	}
    
        
  
    function getOpenTask() public checkOwner returns (uint){
        uint c = 0;
        for(uint8 id=1;id<=I;id++){
           if((Task[id].done == false)&&(Task[id].name != "@deleted@")){
               c++;
            }        
       }
       return c;
    }
    function count() private checkOwner returns (uint){
        uint c = 0;
        for(uint8 id=1;id<=I;id++){
           if(Task[id].name != "@deleted@"){
               c++;
            }        
        }
       return(c);

    }
  
    function Description() public checkOwner returns (taskList[]){        
        uint taskSize = count();
        taskList[] list = new taskList[](taskSize);
        for( uint8 id = 1;id<=I;id++){
            if(Task[id].name != "@deleted@"){
            list[uint(id-1)] = Task[id];
            }            
        }    
        return list;    
    }
      

    
    function DeleteTask(uint8 _key) public{
        delete Task[_key];
        Task[_key].name ="@deleted@";
    
    }
    function WellDone(uint8 _key) public checkOwner{
        if (Task[_key].name !="@deleted@")
        Task[_key].done = true;
        
    }
    
}    
	
