
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;


contract Tasks {
    uint32  timestamp;

	struct taskList{
		string name;
		uint  times;
		bool done;	
	}
   
   // Task[] public NewTask;
    mapping(uint8 => taskList) Task;
    uint8 I = 0;
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;
    }
    modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
	    require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
    function touch() external {
        // Each function that accepts external message must check that
        // message is correctly signed.
        require(msg.pubkey() == tvm.pubkey(), 102);
        // Tells to the TVM that we accept this message.
        tvm.accept();
        // Update timestamp
        timestamp = now;
    }
      
    function AddToList(string  _name) public returns(string) {
        tvm.accept();
        taskList myTask = taskList(_name, now, false);
        Task[I] = myTask;
	    I++;
        return format("Задача'{}'внесена", Task[I].name);
	}
    
        
  
    function sendValue(address dest, uint128 amount, bool bounce) public view {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        // It allows to make a transfer with arbitrary settings
        dest.transfer(amount, bounce, 0);
    }    
    
    
  
    function Descriptipts(uint8 _key) public checkOwnerAndAccept returns (string) {       
        tvm.accept();
	    return format("Задача'{}'внесена", Task[_key].name);
	}
     
    
    function DeleteTask(uint8 _key) public{
        delete Task[_key];
    }
    function WellDone(uint8 _key) public checkOwnerAndAccept{
        Task[_key].done = true;
        
    }
    
}    
	
